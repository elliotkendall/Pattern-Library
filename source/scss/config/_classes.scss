/**
 * COLOR CLASSES
 *
 * Produces color classes from the colors map.
 */
@include private('COLOR CLASSES') {
  
  /**
   * Sets the class prefix. To not use a class prefix,
   * set this variable equal to an empty string ('' or "").
   */
  $prefix: 'color';

  /**
   * Determines whether or not the word 'base' should be
   * included in color classes that use the base tone.
   */ 
  $include-base: false;

  /**
   * Sets the suffix for foreground color classes. To not
   * use a suffix, set this variable equal to an empty string
   * ('' or ""). Make sure that none of your suffixes clash.
   */
  $suffix-foreground: '';

  /**
   * Sets the suffix for background color classes. To not
   * use a suffix, set this variable equal to an empty string
   * ('' or ""). Make sure that none of your suffixes clash.
   */
  $suffix-background: 'bg';

  /**
   * Sets the suffix for contrasting color classes. To not
   * use a suffix, set this variable equal to an empty string
   * ('' or ""). Make sure that none of your suffixes clash.
   */
  $suffix-contrast: 'contrast';

  
  @each $name, $map in $colors {
    @each $tone, $color in $map {
      @if( type-of($color) != 'map' ){
 
        @if( $tone == 'base' and $include-base == false ){

          // Create classes to recolor foregrounds.
          .#{prefix($prefix)}#{$name}#{suffix($suffix-foreground)} {
            color: $color !important;
            background-color: color-contrast($color);
          }

          // Create classes to contrast backgrounds against foregrounds.
          .#{prefix($prefix)}#{$name}#{suffix($suffix-foreground)}#{suffix($suffix-contrast)} {
            background-color: color-contrast($color);
          }

          // Create classes to recolor backgrounds.
          .#{prefix($prefix)}#{$name}#{suffix($suffix-background)} {
            background-color: $color !important;
            color: color-contrast($color);
          }

          // Create classes to contrast foregrounds against backgrounds.
          .#{prefix($prefix)}#{$name}#{suffix($suffix-background)}#{suffix($suffix-contrast)} {
            color: color-contrast($color);
          }

        }
        @else {

          // Create classes to recolor foregrounds.
          .#{prefix($prefix)}#{$name}-#{$tone}#{suffix($suffix-foreground)} {
            color: $color !important;
            background-color: color-contrast($color);
          }

          // Create classes to contrast backgrounds against foregrounds.
          .#{prefix($prefix)}#{$name}-#{$tone}#{suffix($suffix-foreground)}#{suffix($suffix-contrast)} {
            background-color: color-contrast($color);
          }

          // Create classes to recolor backgrounds.
          .#{prefix($prefix)}#{$name}-#{$tone}#{suffix($suffix-background)} {
            background-color: $color !important;
            color: color-contrast($color);
          }

          // Create classes to contrast foregrounds against backgrounds.
          .#{prefix($prefix)}#{$name}-#{$tone}#{suffix($suffix-background)}#{suffix($suffix-contrast)} {
            color: color-contrast($color);
          }

        }

      }
    }
  }
  
}

/**
 * FONT CLASSES
 *
 * Produces font classes from the fonts map.
 */
@include private('FONT CLASSES') {
  
  /**
   * Sets the class prefix. To not use a class prefix,
   * set this variable equal to an empty string ('' or "").
   */
  $prefix: 'font';
  
  @each $name, $family in map-flatten($fonts) {
    
    .#{prefix($prefix)}#{$name} { font-family: $family !important; }
    
  }
  
}