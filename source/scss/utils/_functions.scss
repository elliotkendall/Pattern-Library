/**
 * Use this file to define project-specific functions.
 */

/**
 * is-null()
 *
 * Determines if a value is set to null.
 */
@function is-null( $value ){ @return type-of($value) == 'null'; }

/**
 * is-empty()
 *
 * Determines if a value is an empty string.
 */
@function is-empty( $value ){ @return $value == ''; }

/**
 * is-false()
 *
 * Determines if a value equals false.
 */
@function is-false( $value ){
  
  @if( type-of($value) == 'string'){ @return $value == 'false' }
  @else if( type-of($value) == 'number'){ @return $value == 0 }
  @else if( type-of($value) == 'bool' ){ @return $value == false }
  @else { @return false; }
  
}

/**
 * is-true()
 *
 * Determines if a value equals true.
 */
@function is-true( $value ){
  
  @if( type-of($value) == 'string'){ @return $value == 'true' }
  @else if( type-of($value) == 'number'){ @return $value == 1 }
  @else if( type-of($value) == 'bool' ){ @return $value == true }
  @else { @return false; }
  
}

/**
 * is-set()
 *
 * Determines if a value is set to an actual value.
 */
@function is-set( $value, $is-null: true, $is-empty: true, $is-false: true ){

  @if( $is-null == true and is-null($value) ){ @return false; }
  @if( $is-empty == true and is-empty($value) ){ @return false; }
  @if( $is-false == true and is-false($value) ){ @return false; }
  
  @return true;
  
}

/**
 * prefix()
 *
 * Properly formats a string as a prefixable value.
 */
@function prefix( $prefix ) { @return unquote( if(is-set($prefix), $prefix + '-', '') ); }

/**
 * suffix()
 *
 * Properly formats a string as a suffixable value.
 */
@function suffix( $suffix ) { @return unquote( if(is-set($suffix), '-' + $suffix, '') ); }