// Load our framework to make scaffolding quicker.
@import 'vends/emory-libraries';

// Set variables.
$code: (
  'background': #f5f2f0,
  'foreground': slategray,
  'tokens': (
    'comment': slategray,
    'prolog': slategray,
    'doctype': slategray,
    'cdata': slategray,
    'punctuation': #999999,
    'property': #990055,
    'tag': #990055,
    'boolean': #990055,
    'number': #990055,
    'constant': #990055,
    'symbol': #990055,
    'deleted': #990055,
    'selector': #669900,
    'attr-name': #669900,
    'string': #669900,
    'char': #669900,
    'builtin': #669900,
    'inserted': #669900,
    'operator': #9a6e3a,
    'entity': #9a6e3a,
    'url': #9a6e3a,
    'atrule': #0077aa,
    'attr-value': #0077aa,
    'keyword': #0077aa,
    'function': #dd4a68,
    'class-name': #dd4a68,
    'regex': #ee9900,
    'important': #ee9900,
    'variable': #ee9900
  ),
  'styles': (
    'important': (
      'font-weight': bold
    ),
    'bold': (
      'font-weight': bold
    ),
    'italic': (
      'font-style': italic
    ),
    'operator': (
      'background': hsla(0, 0%, 100%, .5)
    ),
    'entity': (
      'background': hsla(0, 0%, 100%, .5),
      'cursor': help
    )
  ),
  'mods': (
    '.language-css .token-string': (
      'color': #9a6e3a,
      'background': hsla(0, 0%, 100%, .5)
    ),
    '.style .token-string': (
      'color': #9a6e3a,
      'background': hsla(0, 0%, 100%, .5)
    )
  )
);
$breakpoints: (
  's': max-width 599px,
  'm': 900px 600px,
  'l': min-width 901px
);
$pl-border: $border-width-s solid color('slate', 'light');

// Set core styles.
.body {
  @include tokens-text;
}

a {
  text-decoration: none;
}

* {
  position: relative;
  box-sizing: border-box;
}

svg { fill: $color-text-dark; }

h1 { @include tokens-heading('h1'); }
h2 { @include tokens-heading('h2'); }
h3 { @include tokens-heading('h3'); }
h4 { @include tokens-heading('h4'); }
h5 { @include tokens-heading('h5'); }
h6 { @include tokens-heading('h6'); }

pre {
  background-color: map-deep-get($code, 'background');
  color: map-deep-get($code, 'foreground');
  padding: 10px $rhythm-x;
}

pre,
code {
  font-family: monospace;
}

:not(pre) code {
  background-color: map-get($code, 'background');
  color: map-get($code, 'foreground');
  padding: 2.5px 5px;
  border-radius: 3px;
}

// Set clipboard styles.
.copy {
  cursor: copy;
}

// Set tooltip styles.
.tippy-popper {

  $tippy-background: #333333;
  $tippy-foreground: color('white');

  @include tokens-text( $color: $tippy-foreground );

  // Tooltip
  .tippy-tooltip {
    background-color: $tippy-background;
  }

  // Arrow
  .tippy-arrow {
    border-botton-color: $tippy-background;
  }

  // Content
  .tippy-content {
    font-size: .8rem !important;
  }

  // UI Colors
  @each $state in ('success', 'caution', 'error') {

    &.-#{$state} .tippy-tooltip {
      background-color: color('ui', $state);
    }

    &.-#{$state} .tippy-arrow {
      border-bottom-color: color('ui', $state);
    }

  }

}

// Set styles for code snippets.
pre[class*="language-"],
code[class*="language-"] {

  .token {

    @each $token, $color in map-get($code, 'tokens') {

      &.#{$token} {
        color: $color;
      }

    }

    @each $token, $properties in map-get($code, 'styles') {

      &.#{$token} {
        @include expand-properties($properties);
      }

    }

  }

  @each $selector, $properties in map-get($code, 'mods') {

    #{selector($selector)} {
      @include expand-properties($properties);
    }

  }

}

// Set pattern styles.
#sg-patterns {
  @include padding-x($rhythm-x);
}

// Set pattern styles.
.sg-pattern {

  // Head
  & &-head {}

  // Title
  & &-title {
    @include tokens-heading('h2', $important: true);
  }

  // Links
  & .patternLink { color: inherit; }

}

// Set pattern category styles.
.sg-pattern-category {

  // Title
  & &-title {
    @include tokens-heading('h1', $important: true);
  }

  // Description
  & &-body {

  }

  // Links
  & .patternLink { color: inherit; }


}

// Set pattern extra styles.
.sg-pattern-extra {
  overflow: auto !important;

  // Container
  & &-inner {
    display: flex;
    flex-direction: column;
  }

  // Info & Code
  & &-info,
  & &-code {
    width: 100%;
  }

  // Info
  & &-info {
    @include tokens-text;

    // Descriptions
    .sg-pattern-desc {

      // Tables within Descriptions
      table {

        $table-border: $border-width-s solid color('slate');

        @include atoms-table;
        border-collapse: collapse;
        border: $table-border;
        width: 100%;

        th, td { padding: 10px $rhythm-x; }

        tr { border-bottom: $table-border; }

        thead { background-color: color('slate', 'light'); }

      }

    }

  }

}

// Set pattern state styles.
.sg-pattern-state {

   $states: (
    'specification': #708090,
    'construction': #F2C900,
    'review': #FFAB4A,
    'complete': #61BD4F,
    'reconsideration': #0079BF,
    'deprecated': #EB5A46
  );

  @include absolute-center-contents(true);
  padding: 1.5px 5px;
  margin-left: $rhythm-x;
  @include tokens-text('badge', white !important);
  border-radius: 3px;
  text-shadow: 0px 0px 3px rgba($color-text-dark, .4);
  font-weight: 500 !important;

  // States
  @each $state, $color in $states {
    &.#{$state} {
      background-color: $color;
      text-transform: uppercase !important;
      font-size: .75rem !important;
    }
  }

  // Remove bullets.
  &::before { content: none !important; }

}

// Set core styles for meta patterns.
[id^="meta-"] {

  // Always hide code snippets...
  .sg-pattern-extra-code { display: none !important; }

}

// Set styles for meta patterns.

.pl-iconset {

  // Name
  &-name {}

  // Icon Groups
  &-icons {}

  // Icons
  &-icon {
    display: inline-block;
    svg { fill: $color-text-dark; }

    &.-material { @include size(25px); }
    &.-socicon { @include size(22px); padding: 1.5px; }

  }

}

.pl-block {
  margin-top: $rhythm-y;
  border: $pl-border;
  padding: 1em;

  // Name and Class
  &-name,
  &-class {
    display: inline-flex;
  }

  // Name
  &-name { }

  // Class
  &-class {
    margin-left: $rhythm-x;
    font-size: .85rem;
  }

  // Info
  &-info {
    border-top: ($pl-border);
  }

  @include first-child {
    margin-top: auto;
  }

}

.pl-grid {

  --columns-s: 1;
  --columns-m: 2;
  --columns-l: 3;
  --gap: 1rem;

  display: grid;
  grid-gap: var(--gap);
  grid-auto-rows: min-content;
  grid-template-columns: repeat(var(--columns-s), 1fr);

  @include breakpoint( map-get($breakpoints, 'm') ) {
    grid-template-columns: repeat(var(--columns-m), 1fr);
  };
  @include breakpoint( map-get($breakpoints, 'l') ) {
    grid-template-columns: repeat(var(--columns-l), 1fr);
  };

  // Item
  &-item {
    display: flex;
    flex-direction: column;
    padding: 10px;
    border: $pl-border;
    align-items: center;

    // ID
    &-id {
      @include tokens-heading('h5-alt');
      text-align: center;
      text-transform: uppercase !important;
      font-size: 1rem !important;
    }

    // Info
    &-info {
      @include margin-y(10px);
      width: 100%;

      &:first-child {
        margin-top: 0;
      }

    }

    // Meta
    &-meta {
      display: grid;
      grid-template-areas: "label data";
      grid-template-columns: max-content minmax(0, auto);
      grid-gap: 10px;
      @include tokens-text;
      font-size: .8rem !important;
      justify-content: center;
      margin-top: auto;

      // Label
      &-label {
        grid-area: label;
        text-transform: uppercase;
        font-weight: bold !important;
      }

      // Data
      &-data {
        grid-area: data;
      }

    }

  }

}

.pl-callout {
  @include tokens-text;
  padding: $rhythm-x;
  margin-bottom: 1em;
  border: $pl-border;
}
